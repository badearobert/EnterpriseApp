services:
  # ===================== GATEWAY =====================
  backend:
    build: ./backend/api_gateway
    ports:
      - "5000:5000"
    depends_on:
      - etcd
    environment:
    - SESSION_SERVICE_URL=${SESSION_SERVICE_URL}
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped
  # ===================== FRONTEND =====================
  frontend:
    build: ./frontend
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
  # ===================== DATABASES =====================
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "${CASSANDRA_PORT}:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
    env_file:
      - .env
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./db/cassandra_init.cql:/docker-entrypoint-initdb.d/cassandra_init.cql
    networks:
      - app-network
    restart: unless-stopped
  # ======================= KAFKA =======================
  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT},CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:${KAFKA_PORT}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true # todo remove it and create topics manually via script
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:${KAFKA_PORT}", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - app-network
    restart: unless-stopped
  # ===================== MONITORING =====================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    environment:
      - GF_PROMETHEUS_URL=http://prometheus:${PROMETHEUS_PORT}
    networks:
      - app-network
    restart: unless-stopped
  # ===================== ELASTICSEARCH ===================== 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    volumes:
      - ./monitoring/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - esdata:/usr/share/elasticsearch/data
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    env_file:
      - .env
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    networks:
      - app-network
  # ===================== LOGSTASH ===================== 
  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.14.3
  #   container_name: logstash
  #   volumes:
  #     - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
  #     - ./monitoring/logstash/pipeline/:/usr/share/logstash/pipeline/
  #     - ./monitoring/logstash/data:/usr/share/logstash/data
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     LS_JAVA_OPTS: "-Xms512m -Xmx512m"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - app-network
  # ====================== KIBANA ====================== 
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_URL}
    depends_on:
      - elasticsearch
    networks:
      - app-network
  # ===================== GRAFANA ===================== 
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - elasticsearch
  # ================ SERVICE DISCOVERY ================
  etcd:
    image: gcr.io/etcd-development/etcd:v3.5.9
    container_name: etcd
    ports:
      - "${ETCD_CLIENT_PORT}:${ETCD_CLIENT_PORT}"
      - "${ETCD_PEER_PORT}:${ETCD_PEER_PORT}"
    environment:
      - ETCD_NAME=etcd0
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:${ETCD_CLIENT_PORT}
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:${ETCD_CLIENT_PORT}
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:${ETCD_PEER_PORT}
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:${ETCD_PEER_PORT}
      - ETCD_INITIAL_CLUSTER=etcd0=http://etcd:${ETCD_PEER_PORT}
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster-1
      - ETCD_INITIAL_CLUSTER_STATE=new
    volumes:
      - etcd-data:/etcd-data
    networks:
      - app-network
    restart: unless-stopped
  # ===================== SERVICES =====================
  session-service:
    build:
      context: ./backend/session-service
    ports:
      - "${SESSION_SERVICE_PORT}:${SESSION_SERVICE_PORT}"
    depends_on:
      - kafka
      - db
      - etcd
    env_file:
      - .env
      - ./backend/session-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${SESSION_SERVICE_URL}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped
  event-writer-service:
    build:
      context: ./backend/event-writer-service
    ports:
      - "${EVENT_WRITER_PORT}:${EVENT_WRITER_PORT}"
    depends_on:
      - kafka
      - db
      - etcd
    env_file:
      - .env
      - ./backend/event-writer-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${EVENT_WRITER_SERVICE_URL}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped
  user-data-service:
    build:
      context: ./backend/user-data-service
    ports:
      - "${USER_DATA_SERVICE_PORT}:${USER_DATA_SERVICE_PORT}"
    depends_on:
      - etcd
      - data-service
    env_file:
      - .env
      - ./backend/user-data-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${USER_DATA_SERVICE_URL}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped
  data-service:
    build:
      context: ./backend/data-service
    ports:
      - "${DATA_SERVICE_PORT}:${DATA_SERVICE_PORT}"
    environment:
    - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
    depends_on:
      - etcd
      - cassandra
    env_file:
      - .env
      - ./backend/data-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${DATA_SERVICE_URL}:${DATA_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped
volumes:
  db_data:
  cassandra_data:
  prometheus_data:
  esdata:
  etcd-data:
  kafka_data:
  grafana-data:

networks:
  app-network:
    driver: bridge
