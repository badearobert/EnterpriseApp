services:
  # ===================== BACKEND =====================
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
    - SESSION_SERVICE_URL=${SESSION_SERVICE_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped
  # ===================== FRONTEND =====================
  frontend:
    build: ./frontend
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
  # ===================== DATABASE =====================
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:2.8.1
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:${KAFKA_PORT}
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:${KAFKA_PORT}", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped
  # ===================== MONITORING =====================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - app-network
    restart: unless-stopped
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    networks:
      - app-network
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_URL}
    depends_on:
      - elasticsearch
    networks:
      - app-network
  # ===================== SERVICES =====================
  session-service:
    build:
      context: ./backend/session-service
    ports:
      - "${SESSION_SERVICE_PORT}:${SESSION_SERVICE_PORT}"
    depends_on:
      - kafka
      - db
    env_file:
      - ./backend/session-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${SESSION_SERVICE_URL}:${SESSION_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  event-writer-service:
    build:
      context: ./backend/event-writer-service
    ports:
      - "${EVENT_WRITER_PORT}:${EVENT_WRITER_PORT}"
    depends_on:
      - kafka
      - db
    env_file:
      - ./backend/event-writer-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${EVENT_WRITER_PORT}:${EVENT_WRITER_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

volumes:
  db_data:
  prometheus_data:
  esdata:

networks:
  app-network:
    driver: bridge
